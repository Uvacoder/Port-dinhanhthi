{"version":3,"sources":["../../src/lib/db.ts"],"sourcesContent":["import {\n  QueryDatabaseParameters,\n  QueryDatabaseResponse\n} from '@notionhq/client/build/src/api-endpoints'\n\nimport { NotionSorts } from '../interface'\n\n/**\n * We needs this method to be used in outside-nextjs environment. For example, in ./scripts/ud_images.ts\n */\nexport async function getNotionDatabaseWithoutCache(\n  dataId: string,\n  notionToken: string,\n  notionVersion: string,\n  filter?: QueryDatabaseParameters['filter'],\n  startCursor?: string,\n  pageSize?: number,\n  sorts?: NotionSorts[]\n): Promise<QueryDatabaseResponse | undefined> {\n  try {\n    const url = `https://api.notion.com/v1/databases/${dataId}/query`\n    const requestBody = {\n      filter,\n      sorts,\n      start_cursor: startCursor,\n      page_size: pageSize ?? 50\n    }\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${notionToken}`,\n        'Notion-Version': notionVersion as string,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    })\n    return res.json()\n  } catch (error: any) {\n    console.error(error)\n    // Retry after a number of seconds in the returned header\n    const retryAfter = error?.response?.headers['retry-after'] || error['retry-after']\n    if (retryAfter) {\n      console.log(`Retrying after ${retryAfter} seconds`)\n      await new Promise(resolve => setTimeout(resolve, retryAfter * 1000 + 500))\n      return await getNotionDatabaseWithoutCache(\n        dataId,\n        notionToken,\n        notionVersion,\n        filter,\n        startCursor,\n        pageSize,\n        sorts\n      )\n    }\n    return\n  }\n}\n\n/**\n * We needs this method to be used in outside-nextjs environment. For example, in ./scripts/ud_images.ts\n */\nexport const getNotionPageWithoutCache = async (\n  pageId: string,\n  notionToken: string,\n  notionVersion: string\n) => {\n  const url = `https://api.notion.com/v1/pages/${pageId}`\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${notionToken}`,\n      'Notion-Version': notionVersion as string\n    }\n  })\n  return res.json()\n}\n\n/**\n * We needs this method to be used in outside-nextjs environment. For example, in ./scripts/ud_images.ts\n */\nexport const getNotionBlocksWithoutCache = async (\n  pageId: string,\n  notionToken: string,\n  notionVersion: string,\n  pageSize?: number,\n  startCursor?: string\n) => {\n  let url = `https://api.notion.com/v1/blocks/${pageId}/children`\n  if (pageSize) url += `?page_size=${pageSize}`\n  if (startCursor) url += `&start_cursor=${startCursor}`\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${notionToken}`,\n      'Notion-Version': notionVersion as string\n    }\n  })\n  return res.json()\n}\n\n/**\n * https://developers.notion.com/reference/retrieve-a-database\n */\nexport async function retrieveNotionDatabaseWithoutCache(\n  dataId: string,\n  notionToken: string,\n  notionVersion: string\n) {\n  const url = `https://api.notion.com/v1/databases/${dataId}`\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${notionToken}`,\n      'Notion-Version': notionVersion as string\n    }\n  })\n  return res.json()\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,eAAsB,8BACpB,QACA,aACA,eACA,QACA,aACA,UACA,OAC4C;AAlB9C;AAmBE,MAAI;AACF,UAAM,MAAM,uCAAuC,MAAM;AACzD,UAAM,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,MACA,cAAc;AAAA,MACd,WAAW,8BAAY;AAAA,IACzB;AACA,UAAM,MAAM,MAAM,MAAM,KAAK;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,UAAU,WAAW;AAAA,QACpC,kBAAkB;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC,CAAC;AACD,WAAO,IAAI,KAAK;AAAA,EAClB,SAAS,OAAY;AACnB,YAAQ,MAAM,KAAK;AAEnB,UAAM,eAAa,oCAAO,aAAP,mBAAiB,QAAQ,mBAAkB,MAAM,aAAa;AACjF,QAAI,YAAY;AACd,cAAQ,IAAI,kBAAkB,UAAU,UAAU;AAClD,YAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,aAAa,MAAO,GAAG,CAAC;AACzE,aAAO,MAAM;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA;AAAA,EACF;AACF;AAKO,IAAM,4BAA4B,OACvC,QACA,aACA,kBACG;AACH,QAAM,MAAM,mCAAmC,MAAM;AACrD,QAAM,MAAM,MAAM,MAAM,KAAK;AAAA,IAC3B,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,eAAe,UAAU,WAAW;AAAA,MACpC,kBAAkB;AAAA,IACpB;AAAA,EACF,CAAC;AACD,SAAO,IAAI,KAAK;AAClB;AAKO,IAAM,8BAA8B,OACzC,QACA,aACA,eACA,UACA,gBACG;AACH,MAAI,MAAM,oCAAoC,MAAM;AACpD,MAAI;AAAU,WAAO,cAAc,QAAQ;AAC3C,MAAI;AAAa,WAAO,iBAAiB,WAAW;AACpD,QAAM,MAAM,MAAM,MAAM,KAAK;AAAA,IAC3B,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,eAAe,UAAU,WAAW;AAAA,MACpC,kBAAkB;AAAA,IACpB;AAAA,EACF,CAAC;AACD,SAAO,IAAI,KAAK;AAClB;AAKA,eAAsB,mCACpB,QACA,aACA,eACA;AACA,QAAM,MAAM,uCAAuC,MAAM;AACzD,QAAM,MAAM,MAAM,MAAM,KAAK;AAAA,IAC3B,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,eAAe,UAAU,WAAW;AAAA,MACpC,kBAAkB;AAAA,IACpB;AAAA,EACF,CAAC;AACD,SAAO,IAAI,KAAK;AAClB;","names":[]}