{"version":3,"sources":["../../src/lib/hooks.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\n/**\n * Used to determine which heading is currently in view\n */\nexport function useHeadsObserver() {\n  const observer = useRef<IntersectionObserver | null>(null)\n  const [activeId, setActiveId] = useState('')\n\n  useEffect(() => {\n    const handleObsever = (entries: IntersectionObserverEntry[]) => {\n      entries.forEach(entry => {\n        if (entry?.isIntersecting) {\n          setActiveId(entry.target.id)\n        }\n      })\n    }\n\n    observer.current = new IntersectionObserver(handleObsever, {\n      rootMargin: '-100px 0% -80% 0px'\n    })\n\n    const elements = document.querySelectorAll('h2, h3')\n    elements.forEach(elem => observer?.current?.observe(elem))\n    return () => observer.current?.disconnect()\n  }, [])\n\n  return { activeId }\n}\n"],"mappings":";AAAA,SAAS,WAAW,QAAQ,gBAAgB;AAKrC,SAAS,mBAAmB;AACjC,QAAM,WAAW,OAAoC,IAAI;AACzD,QAAM,CAAC,UAAU,WAAW,IAAI,SAAS,EAAE;AAE3C,YAAU,MAAM;AACd,UAAM,gBAAgB,CAAC,YAAyC;AAC9D,cAAQ,QAAQ,WAAS;AACvB,YAAI,OAAO,gBAAgB;AACzB,sBAAY,MAAM,OAAO,EAAE;AAAA,QAC7B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,UAAU,IAAI,qBAAqB,eAAe;AAAA,MACzD,YAAY;AAAA,IACd,CAAC;AAED,UAAM,WAAW,SAAS,iBAAiB,QAAQ;AACnD,aAAS,QAAQ,UAAQ,UAAU,SAAS,QAAQ,IAAI,CAAC;AACzD,WAAO,MAAM,SAAS,SAAS,WAAW;AAAA,EAC5C,GAAG,CAAC,CAAC;AAEL,SAAO,EAAE,SAAS;AACpB;","names":[]}